/*
#-------------
// Function to find smallest window containing all characters of 'pat' 
const int no_of_chars = 256;string findSubString(string str, string pat) {int len1 = str.length(); 
int len2 = pat.length();if (len1 < len2) {cout << "No such window exists"; return ""; }int hash_pat[no_of_chars] = {0}; 
int hash_str[no_of_chars] = {0};for (int i = 0; i < len2; i++) hash_pat[pat[i]]++; 
int start = 0, start_index = -1, min_len = INT_MAX; int count = 0; // count of characters for (int j = 0; j < len1 ; j++) 
{hash_str[str[j]]++; if (hash_pat[str[j]] != 0 && hash_str[str[j]] <= hash_pat[str[j]] ) count++; if (count == len2) 
{ while ( hash_str[str[start]] > hash_pat[str[start]] || hash_pat[str[start]] == 0) { 
if (hash_str[str[start]] > hash_pat[str[start]]) hash_str[str[start]]--; start++; } int len_window = j - start + 1; 
if (min_len > len_window) {min_len = len_window; start_index = start; }}} if (start_index == -1) { 
cout << "No such window exists"; return ""; } return str.substr(start_index, min_len); }
#-------------

#-------------
int countTriplets(int a[], int m, int n) {unordered_map<int, int> frequency; set<pair<int, pair<int, int> > > st; 
for (int i = 0; i < n; i++) { frequency[a[i]] += 1; } int ans = 0; for (int i = 1; i * i <= m; i++) { 
if (m % i == 0 and frequency[i]) { int num1 = m / i; for (int j = 1; j * j <= num1; j++) { if (num1 % j == 0 and frequency[j]) { 
int num2 = num1 / j; if (frequency[num2]) { int temp[] = { num2, i, j }; sort(temp, temp + 3); int setsize = st.size(); 
st.insert({ temp[0], { temp[1], temp[2] } }); if (setsize != st.size()) { if (i != j and j != num2) 
ans += frequency[i] * frequency[j] * frequency[num2]; else if (i == j && j != num2) 
ans += (frequency[i] * (frequency[i] - 1) / 2) * frequency[num2]; else if (j == num2 && j != i) 
ans += (frequency[j] * (frequency[j] - 1) / 2) * frequency[i]; 
else if (i == j and j == num2) ans += (frequency[i] * (frequency[i] - 1) * (frequency[i] - 2) / 6); 
else ans += (frequency[i] * (frequency[i] - 1) / 2) * frequency[j]; }}}}}}return ans;} 
#-------------

#-------------
//clone LL 
Node* clone(Node *start) 
{ 
    Node* curr = start, *temp; 
  
    // insert additional node after 
    // every node of original list 
    while (curr) 
    { 
        temp = curr->next; 
  
        // Inserting node 
        curr->next = new Node(curr->data); 
        curr->next->next = temp; 
        curr = temp; 
    } 
  
    curr = start; 
  
    // adjust the random pointers of the 
    // newly added nodes 
    while (curr) 
    { 
        if(curr->next) 
            curr->next->random = curr->random ? curr->random->next : curr->random; 
  
        // move to the next newly added node by 
        // skipping an original node 
        curr = curr->next?curr->next->next:curr->next; 
    } 
  
    Node* original = start, *copy = start->next; 
  
    // save the start of copied linked list 
    temp = copy; 
  
    // now separate the original list and copied list 
    while (original && copy) 
    { 
        original->next = 
         original->next? original->next->next : original->next; 
  
        copy->next = copy->next?copy->next->next:copy->next; 
        original = original->next; 
        copy = copy->next; 
    } 
  
    return temp; 
} 
#-------------

*/
